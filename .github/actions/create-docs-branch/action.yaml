name: 'Create Docs Branch'
description: 'Creates a docs branch from a specified source branch'
inputs:
  src_branch:
    description: 'Source Branch: [main, docs-x.y.z]'
    required: false
    default: 'main'
  docs:
    description: 'Docs Branch: [latest, docs-x.y.z]'
    required: false
    default: 'latest'
  token:
    description: 'GitHub Token'
    required: true

runs:
  using: 'composite'
  steps:

    - name: Create docs branch
      shell: bash
      run: |
        # Assign the input to a shell variable
        docs_input="${{ inputs.docs }}"
        src_branch="${{ inputs.src_branch }}"

        # Validate the input
        if [[ ! $docs_input =~ ^(latest|docs-[0-9]+\.[0-9]+\.[0-9]+|v?[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          echo "Invalid docs input. Please provide 'latest' or a version in the format 'docs-x.y.z', 'v0.1.0', or '0.1.0'."
          exit 1
        fi

        if [[ $docs_input == 'latest' ]]; then
          # Fetch all branches from the remote
          git fetch --all

          # Get the latest branch named docs-x.y.z from the remote repo
          latest_docs_branch=$(git branch -r --list 'origin/docs-*' | sed 's|origin/||' | sort -V | tail -1)

          # Trim whitespace from both sides of latest_docs_branch
          latest_docs_branch=$(echo "$latest_docs_branch" | xargs)

          if [[ -z $latest_docs_branch ]]; then
            current_docs=$src_branch
          else
            current_docs=$latest_docs_branch
          fi
        else
          # Normalize the docs format to docs-x.y.z
          if [[ $docs_input =~ ^docs-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            current_docs=$docs_input
          elif [[ $docs_input =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            current_docs="docs-${docs_input#v}"
          else
            echo "Unexpected docs format. Exiting."
            exit 1
          fi
        fi

        # Trim whitespace from both sides of current_docs
        current_docs=$(echo "$current_docs" | xargs)

        if git rev-parse --verify --quiet origin/$current_docs; then
          echo "Branch $current_docs exists remotely. Checking out and pulling latest changes."
          git checkout $current_docs || git checkout -b $current_docs origin/$current_docs
          git pull origin $current_docs
        else
          # Fetch all branches from the remote
          git fetch --all

          # Check if the source branch exists
          if git rev-parse --verify --quiet origin/$src_branch; then
            echo "Source branch $src_branch exists remotely. Checking out and pulling latest changes."
            git checkout $src_branch || git checkout -b $src_branch origin/$src_branch
            git pull origin $src_branch
          else
            echo "Source branch $src_branch does not exist remotely. Exiting."
            exit 1
          fi

          # Create the new docs branch
          echo "Creating new branch $current_docs."
          git checkout -b $current_docs
          
          # Push the branch
          git push https://x-access-token:${{ inputs.token }}@github.com/${{ github.repository }} $current_docs
          echo "Branch $current_docs created and pushed."
        fi
