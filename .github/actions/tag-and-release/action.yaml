name: 'Tag and Release'
description: 'Tags and releases a new version of the project'
inputs:
  release:
    description: 'Release Branch: [latest, release-x.y.z, x.y.z]'
    required: false
    default: 'latest'
  token:
    description: 'GitHub Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Determine Latest Release Branch
      id: get_latest_release_branch
      shell: bash
      run: |
        release_input="${{ inputs.release }}"

        if [[ ! $release_input =~ ^(latest|release-[0-9]+\.[0-9]+\.[0-9]+|v?[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          echo "Invalid release input. Please provide 'latest' or a version in the format 'release-x.y.z', 'v0.1.0', or '0.1.0'."
          exit 1
        fi

        if [[ $release_input == 'latest' ]]; then
          git fetch --all
          latest_release_branch=$(git branch -r --list 'origin/release-*' | sed 's|origin/||' | sort -V | tail -1)
          latest_release_branch=$(echo "$latest_release_branch" | xargs)
          if [[ -z $latest_release_branch ]]; then
            release="main"
          else
            release=$latest_release_branch
          fi
        else
          if [[ $release_input =~ ^release-[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            release=$release_input
          elif [[ $release_input =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            release="release-${release_input#v}"
          else
            echo "Unexpected release format. Exiting."
            exit 1
          fi
        fi

        release=$(echo "$release" | xargs)

        if [[ $release =~ ^release-([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          version="${BASH_REMATCH[1]}"
        elif [[ $release =~ ^v?([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
          version="${BASH_REMATCH[1]}"
        else
          echo "Unexpected release format. Exiting."
          exit 1
        fi

        echo "Version: $version"
        echo "::set-output name=version::$version"
        echo "Latest release branch: $release"
        echo "::set-output name=latest_release_branch::$release"

    - name: Checkout Release Branch
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.get_latest_release_branch.outputs.latest_release_branch }}

    - name: View context attributes
      uses: actions/github-script@v6
      with:
        script: console.log(context)

    - name: Set Environment Variables
      run: |
        echo "latest_release_branch=${{ steps.get_latest_release_branch.outputs.latest_release_branch }}" >> $GITHUB_ENV
        echo "version=${{ steps.get_latest_release_branch.outputs.version }}" >> $GITHUB_ENV

    - name: Create Tag
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          const latestReleaseBranch = process.env.latest_release_branch;
          const version = process.env.version;
          console.log(`Creating tag: ${latestReleaseBranch}`);
          console.log(`Version: ${version}`);
          console.log(`Repo: ${context.repo.repo}`);
          console.log(`Owner: ${context.repo.owner}`);
          console.log(`Sha: ${context.sha}`);

    #       # const version = process.env.version;
    #       # const tagName = `v${version}`;
    #       # const { data: ref } = await github.git.createRef({
    #       #   owner: context.repo.owner,
    #       #   repo: context.repo.repo,
    #       #   ref: `refs/tags/${tagName}`,
    #       #   sha: context.sha
    #       # });
    #       # console.log(`Created tag: ${ref.ref}`);

    # - name: Create Release
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       const version = process.env.version;
    #       const tagName = `v${version}`;
    #       const { data: release } = await github.repos.createRelease({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         tag_name: tagName,
    #         name: tagName,
    #         body: `Release ${tagName}`,
    #         draft: false,
    #         prerelease: false
    #       });
    #       console.log(`Created release: ${release.name}`);
