name: 'Tag and Release'
description: 'Tags and releases a new version of the project'
inputs:
  release:
    description: 'Release Branch: [latest, release-x.y.z, x.y.z]'
    required: false
    default: 'latest'
  repo_owner:
    description: 'Repository Owner'
    required: true
  repo_name:
    description: 'Repository Name'
    required: true
  token:
    description: 'GitHub Token'
    required: true

runs:
  using: 'composite'
  steps:

    - name: Validate release input
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const releaseInput = '${{ inputs.release }}';
          const validFormat = /^(latest|release-[0-9]+\.[0-9]+\.[0-9]+|v?[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$/;

    - name: Determine Latest Release Branch
      id: get_latest_release_branch
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const releaseInput = '${{ inputs.release }}';
          const validFormat = /^(latest|release-[0-9]+\.[0-9]+\.[0-9]+|v?[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$/;

          if (!validFormat.test(releaseInput)) {
            throw new Error("Invalid release input. Please provide 'latest' or a version in the format 'release-x.y.z', 'v0.1.0', or '0.1.0'.");
          }

          let release;
          if (releaseInput === 'latest') {
            const { data: branches } = await github.rest.repos.listBranches({
              owner: '${{ inputs.repo_owner }}',
              repo: '${{ inputs.repo_name }}',
            });

            const releaseBranches = branches
              .map(branch => branch.name)
              .filter(name => name.startsWith('release-'))
              .sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));

            release = releaseBranches.pop() || 'main';
          } else {
            release = releaseInput.startsWith('release-') ? releaseInput : `release-${releaseInput.replace(/^v/, '')}`;
          }

          const versionMatch = release.match(/^release-([0-9]+\.[0-9]+\.[0-9]+)$/) || release.match(/^v?([0-9]+\.[0-9]+\.[0-9]+)$/);
          if (!versionMatch) {
            throw new Error("Unexpected release format.");
          }

          const version = versionMatch[1];

          console.log(`Latest Release Branch: ${release}`);
          console.log(`Version: ${version}`);

          core.exportVariable('LATEST_RELEASE_BRANCH', release);
          core.exportVariable('VERSION', version);

    - name: Checkout Release Branch
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
        ref: ${{ env.LATEST_RELEASE_BRANCH }}
        token: ${{ inputs.token }}

    - name: Create Tag
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const version = process.env.VERSION;
          const tagName = `v${version}`;
          const { data: ref } = await github.rest.git.createRef({
            owner: '${{ inputs.repo_owner }}',
            repo: '${{ inputs.repo_name }}',
            ref: `refs/tags/${tagName}`,
            sha: context.sha
          });
          console.log(`Created tag: ${ref.ref}`);

    - name: Create Release
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const version = process.env.VERSION;
          const tagName = `v${version}`;
          const { data: release } = await github.rest.repos.createRelease({
            owner: '${{ inputs.repo_owner }}',
            repo: '${{ inputs.repo_name }}',
            tag_name: tagName,
            name: tagName,
            body: `Release ${tagName}`,
            draft: false,
            prerelease: false
          });
          console.log(`Created release: ${release.name}`);
