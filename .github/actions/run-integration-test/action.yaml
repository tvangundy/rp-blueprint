name: 'Run Integration Test'
description: 'Dispatches and waits for the completion of an integration test'
inputs:
  release:
    description: 'Release Branch: [latest, release-x.y.z]'
    required: false
    default: 'latest'
  repo_owner:
    description: 'Repository Owner'
    required: true
  repo_name:
    description: 'Repository Name'
    required: true
  test_repo_owner:
    description: 'Test Repository Owner'
    required: true
  test_repo_name:
    description: 'Test Repository Name'
    required: true
  token:
    description: 'GitHub Token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Determine Current Release Branch
      id: determine_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const releaseInput = '${{ inputs.release }}';
          let currentRelease;

          if (releaseInput === 'latest') {
            const branches = await github.rest.repos.listBranches({
              owner: '${{ inputs.repo_owner }}',
              repo: '${{ inputs.repo_name }}',
            });

            const releaseBranches = branches.data
              .map(branch => branch.name)
              .filter(name => name.startsWith('release-'))
              .sort((a, b) => a.localeCompare(b, undefined, { numeric: true }));

            currentRelease = releaseBranches.pop() || 'main';
          } else {
            currentRelease = releaseInput.startsWith('release-') ? releaseInput : `release-${releaseInput.replace(/^v/, '')}`;
          }

          core.setOutput('current_release', currentRelease);

    - name: Dispatch Integration Test
      id: dispatch
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const latestReleaseBranch = '${{ steps.determine_release.outputs.current_release }}';
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: '${{ inputs.test_repo_owner }}',
            repo: '${{ inputs.test_repo_name }}',
            workflow_id: 'integration-test-dispatch.yaml',
            ref: 'main',
            inputs: {
              ref: latestReleaseBranch
            }
          });
          console.log('Dispatch Response:', response);

    - name: Wait for Integration Test Dispatch Completion
      id: wait
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
            owner: '${{ inputs.test_repo_owner }}',
            repo: '${{ inputs.test_repo_name }}',
            event: 'workflow_dispatch'
          });

          const run = runs.workflow_runs.find(run => run.name === 'Integration Test Dispatch');
          if (!run) {
            throw new Error('No workflow run found for Integration Test Dispatch');
          }

          console.log(`Run ID: ${run.id}`);

          let status = run.status;
          let conclusion = run.conclusion;

          while (status !== 'completed') {
            await new Promise(resolve => setTimeout(resolve, 10000)); // Sleep for 10 seconds
            const { data: updatedRun } = await github.rest.actions.getWorkflowRun({
              owner: '${{ inputs.test_repo_owner }}',
              repo: '${{ inputs.test_repo_name }}',
              run_id: run.id
            });
            status = updatedRun.status;
            conclusion = updatedRun.conclusion;
            console.log(`Status: ${status}, Conclusion: ${conclusion}`);
          }

          if (conclusion !== 'success') {
            throw new Error(`Workflow failed with conclusion: ${conclusion}`);
          }

          console.log('Workflow completed successfully.');
  